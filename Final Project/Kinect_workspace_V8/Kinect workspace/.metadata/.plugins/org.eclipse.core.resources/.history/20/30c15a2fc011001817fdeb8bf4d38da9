package utils.listeners;

import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;

import viewer.ViewerListenerElements;

public final class MouseMotionListenerImplementation implements MouseMotionListener {

	private final ViewerListenerElements viewer;
	
	private float currentX;
	private float currentY;
	private float currentAlpha;
	
	public MouseMotionListenerImplementation(final ViewerListenerElements viewer) {
		this.viewer = viewer;
	}

	/**
	 * Permet de faire pivoter le squelette.
	 * <p>
	 * Permet lorsque seulement le bouton gauche de la souris est appuyé:
	 * <p>
	 * - de faire tourner la toile selon l'axe (OX) (initialement horizontal orienté vers la droite) en bougeant la souris selon l'axe (OY)
	 * <p>
	 * - de faire tourner la toile selon l'axe (OY) (initialement vertical orienté vers le haut) en bougeant la souris selon l'axe (OX)
	 * <p>
	 * Permet lorsque seulement le bouton droite de la souris est appuyé:
	 * <p>
	 * - de faire tourner la toile selon l'axe (OZ) (tel que cet axe complète le repère direct correspondant (O,x,y,z)) en faisant pivoter la souris autour du centre O (la variation de l'angle du complexe associé aux coordonnées caractérise cette rotation)
	 */
	@Override
	public void mouseDragged(final MouseEvent e) {
		final int buttonsPressed = e.getModifiersEx();
		final int leftClick = MouseEvent.BUTTON1_DOWN_MASK;
		final int rightClick = MouseEvent.BUTTON3_DOWN_MASK;
		if(buttonsPressed == leftClick) {
			if(showSkeletonInterface.getLeftDragInitialized()) {
				final float tempX = e.getX();
				final float tempY = e.getY();
				showSkeletonInterface.setCurrentYRot(currentX - tempX);
				showSkeletonInterface.setCurrentXRot(currentY - tempY);
				currentX = tempX;
				currentY = tempY;
			} else {
				currentX = e.getX();
				currentY = e.getY();
				showSkeletonInterface.setLeftDragInitialized(true);
			}
		}
		if(buttonsPressed == rightClick) {
			if(showSkeletonInterface.getRightDragInitialized()) {
				final float tempX = e.getX()-200;
				final float tempY = -(float)(e.getY()-200);
				final float tempAlpha = (float)Math.atan2(tempY,tempX);
				final float tempAlphaDiff = tempAlpha - currentAlpha;
				if(Math.abs(tempAlphaDiff) < Math.PI) {
					showSkeletonInterface.setCurrentZRot((200/(float)Math.PI) * (tempAlphaDiff));
				} else {
					if(tempAlphaDiff < 0) {
						showSkeletonInterface.setCurrentZRot((200/(float)Math.PI) * (2*(float)Math.PI + tempAlphaDiff));
					} else {
						showSkeletonInterface.setCurrentZRot((200/(float)Math.PI) * (-(float)2*(float)Math.PI + tempAlphaDiff));
					}
				}
				currentAlpha = tempAlpha;
			} else {
				currentX = e.getX();
				currentY = e.getY();
				currentAlpha = (float)Math.atan2(currentY,currentX);
				showSkeletonInterface.setRightDragInitialized(true);
			}
		}
	}

	@Override
	public void mouseMoved(final MouseEvent e) {}
}
