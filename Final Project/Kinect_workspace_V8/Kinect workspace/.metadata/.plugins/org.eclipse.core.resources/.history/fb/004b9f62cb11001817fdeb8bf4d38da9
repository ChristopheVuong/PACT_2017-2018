package utils.kinect;

import java.awt.Scrollbar;

import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.Animator;

import current.KinectInterface;
import viewer.Viewer3D;
import utils.listeners.MouseListenerImplementation;
import utils.listeners.MouseMotionListenerImplementation;
import utils.listeners.MouseWheelListenerImplementation;

public abstract class ShowSkeletonAbstract implements ShowSkeletonInterface {

	private final KinectInterface kinectInterface;
	private final Viewer3D viewer;
	private final ScrollbarSized scrollbar;

	private boolean leftDragInitialized;
	private boolean rightDragInitialized;

	private float currentXRot;
	private float currentYRot;
	private float currentZRot;

	/**
	 * Lance une toile OpenGL.
	 * <p>
	 * Ajoute les listeners pour dessiner sur la toile, et pour pouvoir faire pivoter le squelette.
	 */
	public ShowSkeletonAbstract(final KinectInterface kinectInterface) {
		this.kinectInterface = kinectInterface;
		viewer = new Viewer3D();
		scrollbar = new ScrollbarSized(Scrollbar.HORIZONTAL,0,1,0,0,400,20);
	}

	@Override
	public final KinectInterface getKinectInterface() {
		return kinectInterface;
	}

	@Override
	public final GLCanvas getGLCanvas() {
		return glcanvas;
	}

	@Override
	public final GLU getGLU() {
		return glu;
	}
	
	@Override
	public final ScrollbarSized getScrollbar() {
		return scrollbar;
	}

	@Override
	public final void setLeftDragInitialized(final boolean leftDragInitialized) {
		this.leftDragInitialized = leftDragInitialized;
	}

	@Override
	public final void setRightDragInitialized(final boolean rightDragInitialized) {
		this.rightDragInitialized = rightDragInitialized;
	}

	@Override
	public final boolean getLeftDragInitialized() {
		return leftDragInitialized;
	}

	@Override
	public final boolean getRightDragInitialized() {
		return rightDragInitialized;
	}

	@Override
	public final float getCurrentXRot() {
		return currentXRot;
	}

	@Override
	public final void setCurrentXRot(final float currentXRot) {
		this.currentXRot = currentXRot;
	}

	@Override
	public float getCurrentYRot() {
		return currentYRot;
	}

	@Override
	public void setCurrentYRot(final float currentYRot) {
		this.currentYRot = currentYRot;
	}

	@Override
	public float getCurrentZRot() {
		return currentZRot;
	}

	@Override
	public void setCurrentZRot(final float currentZRot) {
		this.currentZRot = currentZRot;
	}
}