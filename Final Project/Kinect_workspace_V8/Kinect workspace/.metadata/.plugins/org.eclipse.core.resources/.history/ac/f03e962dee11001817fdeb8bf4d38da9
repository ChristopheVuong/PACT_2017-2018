package current;

import javax.swing.JFrame;
import javax.swing.Timer;

import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.glu.GLU;

import readAndWrite.ShowSkeletonRead.EventListener;
import utils.kinect.ShowSkeletonAbstract;
import utils.kinect.ShowSkeletonInterface;
import utils.listeners.EventListenerAbstract;
import utils.listeners.EventListenerAbstract.TimerListener;
import viewer.Viewer3D;

/**
 * Initialise l'affichage du squelette et le maintient à jour à l'aide des nouvelles données de positions.
 */
public final class ShowSkeleton extends ShowSkeletonAbstract {

	/**
	 * Lance une toile OpenGL.
	 * <p>
	 * Ajoute les listeners pour dessiner sur la toile, et pour pouvoir faire pivoter le squelette.
	 */
	public ShowSkeleton(final KinectInterface kinectInterface) {
		super(kinectInterface);

		getViewer().addEventListener(new EventListener(getViewer(), this));

		final JFrame frame = new JFrame("Show Skeleton");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().add(getViewer());
		frame.setSize(frame.getContentPane().getPreferredSize());
		frame.setVisible(true);
	}

	private class EventListener extends EventListenerAbstract {

		public EventListener(final Viewer3D viewer, final ShowSkeletonInterface showSkeletonInterface) {
			super(viewer);
			TimerListener timerListener = new TimerListener(this,showSkeletonInterface);
			Timer timer = new Timer(50,timerListener);
			timerListener.setTimer(timer);
		}

		/**
		 * Permet d'afficher le contenu de la toile, qui grâce à l'Animator varie dynamiquement avec les variations du tableau positions.
		 * <p>
		 * Effectue les éventuels changements de vue du squelette.
		 * <p>
		 * Trace tous les segments liants les points du squelette.
		 */
		@Override
		public void display() {
			displayConstruct(ShowSkeleton.this);
		}
	}
}